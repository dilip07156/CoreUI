@model Voyager.App.ViewModels.QuoteRoutingViewModel


@using (Html.BeginForm("QuoteRouting", "Quote", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, true, new { @class = "form-horizontal", role = "form", id = "frmQuoteRouting" }))
{
    @Html.HiddenFor(m => m.QRFID)
    @Html.HiddenFor(m => m.IsRoutingExist)
    @Html.HiddenFor(m => m.IsOverwriteExtPos)

    @if (TempData.Keys.Contains("success"))
    {
        <div class="alert alert-success">
            <a href="#" class="close" data-dismiss="alert" aria-label="close" title="close">×</a>
            <strong id="successmsg">Success!</strong> @TempData["success"].ToString()
        </div>
    }
    else if (TempData.Keys.Contains("error"))
    {
        <div class="alert alert-danger">
            <a href="#" class="close" data-dismiss="alert" aria-label="close" title="close">×</a>
            <strong id="errormsg">Error!</strong> @TempData["error"].ToString()
        </div>
    }

    <div style="display:none;text-align:left;" id="divSuccessError">
        <a class="close" title="close">×</a>
        <strong id="stMsg"></strong> <label id="lblmsg"></label>
    </div>


    <div class="btn-cont pull-right hiddenData">
        <ul>
            <li></li>
            <li><input type="button" value="Save" class="btn btn-blue btn-md routingSave"></li>
        </ul>
    </div>
    <h3>Routing - <em id="lblRoutingCities"></em> </h3>
    <div class="clearfix"></div>

  
<div class="row">
    <div class="col-md-10">
        <div class="custom-mob-tbl table-responsive table-departures-dates">
            <div class="main-lbl" style="width:auto;text-align:right;padding-bottom:3px">
                @Html.CheckBoxFor(m => m.IsSetPrefHotels)
                Set Preferred Hotel
            </div>
            @*<div style="text-align:right;padding-bottom:3px">@Html.CheckBoxFor(m => m.QuoteRoutingData[0].IsLocalGuide, new { @id = "IsLocalGuide_" }) Set Preffered Hotel</div>*@
            <table class="table" id="tblRouting">
                <thead>
                    <tr>
                        <th class="col-md-6" colspan="2"><span>Country / City</span></th>
                        <th class="col-md-3" rowspan="2"><span>Days / Nights</span></th>
                        <th class="col-md-1" rowspan="2"><span>Preferred Star Hotels</span></th>
                        <th class="" rowspan="2"><span>Local Guide</span></th>
                        <th class="col-md-1" rowspan="2"><span>Move</span></th>
                        <th class="" rowspan="2"><span></span></th>

                    </tr>
                    <tr>
                        <th>From</th>
                        <th>To</th>
                    </tr>

                </thead>
                <tbody class="row-grid-sm document-list tblRoutingData">
                    @if (Model.QuoteRoutingData != null && Model.QuoteRoutingData.Count > 0)
                    {
                        @for (int i = 0; i < Model.QuoteRoutingData.Count; i++)
                        {
                            <tr id="clonedInput_@i" class="clonedInput">
                                <td>
                                    @Html.HiddenFor(m => m.QuoteRoutingData[i].RouteSequence, new { @id = "RouteSequence_" + i })
                                    @Html.HiddenFor(m => m.QuoteRoutingData[i].RouteID, new { @id = "RouteId_" + i })
                                    @Html.HiddenFor(m => m.QuoteRoutingData[i].FromCityID, new { @id = "FromCity_" + i })
                                    @Html.TextBoxFor(m => m.QuoteRoutingData[i].FromCityName, new { @class = "form-control bindCity fromCity", @id = "FromCityUI_" + i, @style = "width:91%" })
                                    @Html.ValidationMessageFor(m => m.QuoteRoutingData[i].FromCityName, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.QuoteRoutingData[i].ToCityID, new { @id = "ToCity_" + i })
                                    @Html.TextBoxFor(m => m.QuoteRoutingData[i].ToCityName, new { @class = "form-control bindCity toCity", @id = "ToCityUI_" + i, @style = "width:91%" })
                                    @Html.HiddenFor(m => m.QuoteRoutingData[i].ToCityName, new { @id = "hdnToCityUI_" + i })
                                    @Html.ValidationMessageFor(m => m.QuoteRoutingData[i].ToCityName, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    <div class="day-night row" style="padding-left:5px;">
                                        @Html.TextBoxFor(m => m.QuoteRoutingData[i].Days, new { @class = "form-control text-center numeric AutoPopNights noDay", @id = "Days_" + i })
                                        @Html.ValidationMessageFor(m => m.QuoteRoutingData[i].Days, "", new { @class = "text-danger" })
                                        Day(s)  <i class="seprater"></i>
                                        @Html.TextBoxFor(m => m.QuoteRoutingData[i].Nights, new { @class = "form-control text-center numeric noNight", @id = "Nights_" + i }) Night(s)
                                        @Html.ValidationMessageFor(m => m.QuoteRoutingData[i].Nights, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    @if (Model.QuoteRoutingData[i].Nights > 0)
                                    {
                                        @Html.DropDownListFor(m => m.QuoteRoutingData[i].PrefStarRating, new SelectList(Model.StarRatingList, "Value", "Value"), "Select", new { @class = "form-control clsStarRating" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(m => m.QuoteRoutingData[i].PrefStarRating, new SelectList(Model.StarRatingList, "Value", "Value"), "Select", new { @class = "form-control clsStarRating", @style = "display:none;" })
                                    }

                                </td>
                                <td class="text-center chkbox">
                                    @Html.CheckBoxFor(m => m.QuoteRoutingData[i].IsLocalGuide, new { @id = "IsLocalGuide_" + i })
                                </td>
                                <td>
                                    <div class="up-down">
                                        <a><i class="fa-arrow-up move-up"></i> </a>
                                        <a><i class="fa-arrow-down move-down"></i> </a>
                                    </div>
                                </td>
                                <td>
                                    <div class="icon-squre-cont">
                                        <a class="icon-squre-green clone"><i class="fa fa-plus"></i></a>
                                        <a class="icon-squre-red remove"><i class="fa fa-times"></i></a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="clearfix"></div>
</div>
<div class="btn-cont">
    <input type="button" value="Save" class="btn btn-blue btn-md routingSave">
</div>

@if (Model.QuoteRoutingData != null && Model.QuoteRoutingData.Count > 0)
{
    <table>
        @*dummy row*@
        <tr id="clonedInput_00" class="clonedInput" style="display:none">
            <td>
                @Html.HiddenFor(m => m.QuoteRoutingData[0].RouteSequence, new { @id = "RouteSequence_0" })
                @Html.HiddenFor(m => m.QuoteRoutingData[0].RouteID, new { @id = "RouteId_0" })
                @Html.HiddenFor(m => m.QuoteRoutingData[0].FromCityID, new { @id = "FromCity_0" })
                @Html.TextBoxFor(m => m.QuoteRoutingData[0].FromCityName, new { @class = "form-control bindCity fromCity", @id = "FromCityUI_0", @style = "width:91%" })
                <span class="field-validation-valid text-danger" id="spanValidationMsg_0" data-valmsg-for="QuoteRoutingData[0].FromCityName" data-valmsg-replace="true"></span>
            </td>
            <td>
                @Html.HiddenFor(m => m.QuoteRoutingData[0].ToCityID, new { @id = "ToCity_0" })
                @Html.TextBoxFor(m => m.QuoteRoutingData[0].ToCityName, new { @class = "form-control bindCity toCity", @id = "ToCityUI_0", @style = "width:91%" })
                @Html.HiddenFor(m => m.QuoteRoutingData[0].ToCityName, new { @id = "hdnToCityUI_0" })
                <span class="field-validation-valid text-danger" id="spanValidationMsg_0" data-valmsg-for="QuoteRoutingData[0].ToCityName" data-valmsg-replace="true"></span>
            </td>
            <td>
                <div class="day-night row" style="padding-left:5px;">
                    @Html.TextBoxFor(m => m.QuoteRoutingData[0].Days, new { @class = "form-control text-center AllowOnlyNumeric AutoPopNights noDay", @id = "Days_0" })
                    <span class="field-validation-valid text-danger" id="spanValidationMsg_0" data-valmsg-for="QuoteRoutingData[0].Days" data-valmsg-replace="true"></span>
                    Day(s)  <i class="seprater"></i>
                    @Html.TextBoxFor(m => m.QuoteRoutingData[0].Nights, new { @class = "form-control text-center AllowOnlyNumeric noNight", @id = "Nights_0" }) Night(s)
                    <span class="field-validation-valid text-danger" id="spanValidationMsg_0" data-valmsg-for="QuoteRoutingData[0].Nights" data-valmsg-replace="true"></span>
                </div>
            </td>
            <td>
                @Html.DropDownListFor(m => m.QuoteRoutingData[0].PrefStarRating, new SelectList(Model.StarRatingList, "Value", "Value"), "Select", new { @class = "form-control clsStarRating" })
            </td>
            <td class="text-center chkbox">
                @Html.CheckBoxFor(m => m.QuoteRoutingData[0].IsLocalGuide, new { @id = "IsLocalGuide_0" })
            </td>
            <td>
                <div class="up-down">
                    <a><i class="fa-arrow-up move-up"></i> </a>
                    <a><i class="fa-arrow-down move-down"></i> </a>
                </div>
            </td>
            <td>
                <div class="icon-squre-cont">
                    <a class="icon-squre-green clone"><i class="fa fa-plus"></i></a>
                    <a class="icon-squre-red remove"><i class="fa fa-times"></i></a>
                </div>
            </td>
        </tr>
    </table>

}
}

<script src="~/js/Sales/QuoteRouting.js"></script>
@*<script src="~/js/Sales/common.js"></script>*@